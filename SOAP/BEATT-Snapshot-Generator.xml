<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2990b548-b7a3-493d-88c3-ba511757a1ab" activeEnvironment="Default" name="BEATT Tool" resourceRoot="" soapui-version="5.7.2" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:testSuite id="28710ea3-925a-4779-baa7-ef65d33101e7" name="Scripts">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="dbe9ce60-75ec-420c-a449-109f1e4247d7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Generate HTML Report (experimental)" id="59c2ef96-33fa-412f-9356-b16dfab69325">
        <con:settings/>
        <con:config>
          <script><![CDATA[import groovy.transform.Field
import com.eviware.soapui.support.UISupport

@Field def projects = com.eviware.soapui.SoapUI.getWorkspace().getProjectList()
@Field def projectNames = ["Tax-Pro"]
@Field def ignoreSuites = ["DEV (Old)", "SAT (Old)"]
@Field def devEnvironment = ["DEV", "DEV-PWAS"]
@Field def satEnvironment = ["SAT", "SAT-PWAS"]

def projectFileDir = context.testCase.testSuite.project.path
def projectFolderDir = new File(projectFileDir).getParentFile()
def outputFolder = new File(projectFolderDir, "output")
initializeFolder(outputFolder, true)

def main(outputFolder) {
    // verifyVariables()
    processProjects(outputFolder)
}

def verifyVariables() {
    log.info("Variables verified!")
}

def initializeFolder(File folder, Boolean clear = false) {
    if (folder.exists()) {
        if (clear) {
            folder.eachFile { file ->
                if (file.isDirectory()) clearFolder(file)
                file.delete()
            }
            log.info("FOLDER [${folder.getName()}] already exists, clearing content")
        } else {
            log.info("FOLDER [${folder.getName()}] already exists, leaving as is")
        }
    } else {
        folder.mkdirs()
        log.info("FOLDER [${folder.getName()}] not found, creating new folder!")
    }
}

def escapeForHTML(value) {
    return value?.replaceAll("&", "&amp;")
        ?.replaceAll("<", "&lt;")
        ?.replaceAll(">", "&gt;")
        ?.replaceAll("\"", "&quot;")
        ?.replaceAll("'", "&#39;") ?: ""
}

def getRestCoverage(restTestStep) {
    if (restTestStep.isDisabled()) return 'disabled'
    def result = restTestStep.run(testRunner, context)
    def status = result.getStatus();
    log.info("${restTestStep.name}=====================")
    log.info("Pass/Fail: " + status);
    restTestStep.getAssertionList().each { assertion ->
        log.info("${assertion.getClass().getSimpleName()}: ${assertion.getStatus()}")
    }
    return status.toString() == 'OK' ? 'y' : 'n'
}

def getAssertionResults(restTestStep) {
    def notes = [];
    restTestStep.getAssertionList().each { assertion ->
        def assertionResult = assertion.getStatus().toString();
        if(assertionResult == 'VALID') {
            notes.add("${assertion.getClass().getSimpleName()}: PASSED")
        }
        else if(assertionResult == 'FAILED') {
            notes.add("${assertion.getClass().getSimpleName()}: FAILED")
        }
        else {
            notes.add("${assertion.getClass().getSimpleName()}: UNKNOWN")
        }
    }
    return notes.join("\n");
}

def processProjects(outputFolder) {
    projects.findAll { project -> projectNames.contains(project.name) }.each { project ->
        def outputFilePath = "${outputFolder}/${project.name}-DATAEXPORT.html"
        // log.info("Generating HTML for project: ${project.name}")

        def writer = new File(outputFilePath).withWriter { writer ->
            def id = 1
            writeHtmlHeader(writer, project.name)

            project.getTestSuiteList().each { testSuite ->
                // def testSuite = testSuiteEntry.value
                if (ignoreSuites.contains(testSuite.name)) return

                writeSuiteRow(writer, testSuite.name)

                testSuite.getTestCaseList().each { testCase ->
                    // def testCase = testCaseEntry.value
                    testCase.getTestStepList().each { testStep ->
                        // def testStep = testStepEntry.value

                        if (!(testStep instanceof com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep)) {
                            log.info("[ERROR]: Skipping test step - ${testStep.name} due to not being REST ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
                            return
                        }

                        def request = testStep.getHttpRequest()
                        def resourcePath = request.path
                        def httpMethod = request.method.toString()
                        def dataMethods = getDataMethods(request)
                                                def devCoverage = ""
                                                def satCoverage = ""

                        // JUST TO LIMIT TO 5 FOR PERFORMANCE
                                                if(id < 5) {
                                devCoverage = devEnvironment.contains(testSuite.name) ? getRestCoverage(testStep) : ""
                                satCoverage = satEnvironment.contains(testSuite.name) ? getRestCoverage(testStep) : ""
                                                }

                        // Get assertion details if failed
                        def assertionNotes = getAssertionResults(testStep);

                        writeHtmlRow(writer, id, devCoverage, satCoverage, resourcePath, testCase.name, httpMethod, testStep.name, dataMethods, assertionNotes)
                        id++
                    }
                }
            }
            writeHtmlFooter(writer)
        }
        log.info("HTML file generated at: ${outputFilePath}")
    }
}

def getDataMethods(request) {
    def dataMethods = []
    if (!request.getRequestContent().isEmpty()) dataMethods.add("Request Body (JSON)")
    if (!request.getParams().isEmpty()) dataMethods.add("Request Params")
    if (!request.getRequestHeaders().isEmpty()) dataMethods.add("Header Params")
    return dataMethods.join(", ")
}

def writeHtmlHeader(writer, projectName) {
    writer.writeLine("""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>${projectName} Backend Tracker</title>
            <style>
                body { font-family: Arial, sans-serif; }
                table { border-collapse: collapse; width: 100%; }
                th, td { border: 1px solid #ddd; padding: 8px; }
                th { background-color: #f2f2f2; }
                .suite-row { font-weight: bold; background-color: #FFFF00; text-align: center; }
            </style>
        </head>
        <body>
            <h1>${projectName} Backend Automation Test Coverage</h1>
            <table>
                <tr>
                    <th>ID</th>
                    <th>DEV Coverage</th>
                    <th>SAT Coverage</th>
                    <th>Functional Coverage</th>
                    <th>API</th>
                    <th>Functionality</th>
                    <th>Method</th>
                    <th>Scenario</th>
                    <th>Data Methods</th>
                    <th>Notes</th>
                </tr>
    """)
}

def writeSuiteRow(writer, suiteName) {
    writer.writeLine("<tr><td colspan='10' class='suite-row'>${escapeForHTML(suiteName)} SUITE</td></tr>")
}

def writeHtmlRow(writer, id, devCoverage, satCoverage, resourcePath, functionality, method, scenario, dataMethods, notes = "") {
    writer.writeLine("""
        <tr>
            <td>${id}</td>
            <td>${escapeForHTML(devCoverage)}</td>
            <td>${escapeForHTML(satCoverage)}</td>
            <td></td>
            <td>${escapeForHTML(resourcePath)}</td>
            <td>${escapeForHTML(functionality)}</td>
            <td>${escapeForHTML(method)}</td>
            <td>${escapeForHTML(scenario)}</td>
            <td>${escapeForHTML(dataMethods)}</td>
            <td>${notes}</td>
        </tr>
    """)
}

def writeHtmlFooter(writer) {
    writer.writeLine("""
            </table>
        </body>
        </html>
    """)
}

main(outputFolder)

UISupport.showInfoMessage("Script ran succesffully with no errors i think", "Task completed");]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Generate Snapshot" id="82243c6d-f601-4725-b2f4-cf0291348e29">
        <con:settings/>
        <con:config>
          <script><![CDATA[import groovy.json.JsonOutput
import com.eviware.soapui.support.UISupport

// Define the output folder for snapshots
def outputFolder = new File(context.testCase.testSuite.project.path).getParentFile()
outputFolder = new File(outputFolder, 'snapshots')

// Create a folder for today's date
def dateFolder = new File(outputFolder, new Date().format('yyyy-MM-dd', TimeZone.getTimeZone('UTC')))
initializeFolder(dateFolder, false)

// Main function to process projects
def main(outputFolder) {
    try {
        processProjects(outputFolder)
    } catch (Exception e) {
        log.error("Failed to process projects: ${e.message}")
        log.error(e.stackTrace.join("\n"))
        throw e
    }
}

// Initialize a folder, optionally clearing it if it exists
def initializeFolder(File folder, Boolean clear = false) {
    if (folder.exists()) {
        if (clear) {
            folder.eachFile { file ->
                if (file.isDirectory()) {
                    clearFolder(file)
                }
                file.delete()
            }
            log.info("Cleared folder: ${folder.getName()}")
        }
    } else {
        folder.mkdirs()
        log.info("Created folder: ${folder.getName()}")
    }
}

// Process all projects except the current one
def processProjects(outputFolder) {
    def allProjects = com.eviware.soapui.SoapUI.getWorkspace().getProjectList()
    def currentProjectName = context.testCase.testSuite.project.name

    allProjects.findAll { project ->
        project.name != currentProjectName
    }.each { project ->
        def projectData = createProjectData(project)

        // Create output file structure
        def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss', TimeZone.getTimeZone('UTC'))
        def jsonOutput = JsonOutput.prettyPrint(JsonOutput.toJson(projectData))
        writeOutputFile(outputFolder, project, timestamp, jsonOutput)
    }
}

// Create a data structure for a project
def createProjectData(project) {
    def projectData = [
        projectName: project.name,
        testSuites: [],
        totalTestSuites: 0,
        totalTestCases: 0,
        totalPassedCases: 0,
        totalFailedCases: 0,
        totalAssertions: 0,
        totalTestSteps: 0,
        totalPassedSteps: 0,
        totalFailedSteps: 0,
    ]

    project.getTestSuiteList().each { testSuite ->
        def suiteData = createTestSuiteData(testSuite, projectData)
        projectData.totalTestSuites++
        projectData.testSuites << suiteData
    }

    return projectData
}

// Create a data structure for a test suite
def createTestSuiteData(testSuite, projectData) {
    def suiteData = [
        testSuiteName: testSuite.name,
        disabled: testSuite.isDisabled(),
        status: 'passed',
        testCases: []
    ]

    testSuite.getTestCaseList().each { testCase ->
        def testCaseData = createTestCaseData(testCase, projectData, suiteData)
        projectData.totalTestCases++
        suiteData.testCases << testCaseData
    }

    return suiteData
}

// Create a data structure for a test case
def createTestCaseData(testCase, projectData, suiteData) {
    def testCaseData = [
        testCaseName: testCase.name,
        disabled: testCase.isDisabled() || suiteData.disabled || projectData.disabled,
        status: 'passed',
        testSteps: [],
    ]

    testCase.getTestStepList().each { testStep ->
        def stepData = createTestStepData(testStep, projectData, suiteData, testCaseData)
        projectData.totalTestSteps++
        testCaseData.testSteps << stepData
    }

    return testCaseData
}

// Create a data structure for a test step
def createTestStepData(testStep, projectData, suiteData, testCaseData) {
    def stepData = [
        testStepName: testStep.getName(),
        disabled: testStep.isDisabled() || testCaseData.disabled || suiteData.disabled || projectData.disabled,
        method: null,
        endpoint: null,
        resource: null,
        pathParams: [:],
        queryParams: [:],
        headers: [:],
        requestBody: [:],
        assertions: [],
        statusCode: 'passed',
        message: null,
    ]

    if (testStep instanceof com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep) {
        if (!stepData.disabled) {
            def result = testStep.run(testRunner, context)
            stepData.statusCode = result.getStatus().toString()
            stepData.message = result.getMessages().toString()
        }
        stepData.method = testStep.getHttpRequest().method.toString()
        stepData.resource = testStep.getResourcePath()
        stepData.endpoint = testStep.getHttpRequest().getEndpoint()
        stepData.pathParams = testStep.getRestMethod().getParams().getPropertyNames().collectEntries { name ->
            [(name): testStep.getRestMethod().getPropertyValue(name)]
        }
        stepData.headers = testStep.getHttpRequest().getRequestHeaders()
        stepData.requestBody = testStep.getHttpRequest().getRequestContent()

        testStep.getAssertionList().collect { assertion ->
            def assertionData = createAssertionsData(assertion, stepData, projectData, suiteData, testCaseData)
            projectData.totalAssertions++
            stepData.assertions << assertionData
        }
    } else {
        log.error("Unsupported test step type: ${testStep.getClass().getName()}")
        return null
    }

    return stepData
}

// Create a data structure for an assertion
def createAssertionsData(assertion, stepData, projectData, suiteData, testCaseData) {
    def assertionData = [
        type: assertion.getLabel(),
        status: assertion.status.toString()
    ]

    if (assertion.status.toString() != 'VALID') {
        stepData.statusCode = 'failed'
        testCaseData.status = 'failed'
        suiteData.status = 'failed'
        projectData.status = 'failed'
        
        // projectData.totalFailedCases++
        // projectData.totalFailedSteps++
    } else {
        // projectData.totalPassedCases++
        // projectData.totalPassedSteps++
    }

    return assertionData
}

// Write the JSON output to a file
def writeOutputFile(outputFolder, project, timestamp, jsonOutput) {
    def dateFolder = new File(outputFolder, new Date().format('yyyy-MM-dd', TimeZone.getTimeZone('UTC')))
    dateFolder.mkdirs()

    def projectFolder = new File(dateFolder, project.name)
    projectFolder.mkdirs()

    def outputFilePath = "${projectFolder}/${timestamp}.json"
    new File(outputFilePath).text = jsonOutput
    log.info("JSON export written to: ${outputFilePath}")
}

// Start the main process
main(outputFolder)

UISupport.showInfoMessage("Snapshot(s) generated with no errors")]]></script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>